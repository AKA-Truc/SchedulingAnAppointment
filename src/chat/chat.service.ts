import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
import { SendMessageDto } from './DTO/SendMessage.dto';
import { MongoPrismaService } from 'src/prisma/mongo-prisma.service';
import { PrismaService } from 'src/prisma/prisma.service';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class ChatService {
    constructor(private mongo: MongoPrismaService,
        private prisma: PrismaService,
        private jwtService: JwtService,
    ) { }

    async getOrCreateConversation(userA: number, userB: number) {
        const [user1, user2] = [userA, userB].sort((a, b) => a - b);

        let conversation = await this.mongo.conversation.findFirst({
            where: { user1, user2 },
        });

        if (!conversation) {
            conversation = await this.mongo.conversation.create({
                data: { user1, user2 },
            });
            console.log(`üÜï T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi gi·ªØa ${user1} v√† ${user2}: ${conversation.id}`);
        } else {
            console.log(`‚úÖ ƒê√£ t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán: ${conversation.id}`);
        }

        return conversation;
    }

    async saveMessage(dto: SendMessageDto) {
        const conversation = await this.getOrCreateConversation(dto.fromUserId, dto.toUserId);

        const savedMessage = await this.mongo.message.create({
            data: {
                fromUser: dto.fromUserId,
                toUser: dto.toUserId,
                content: dto.content,
                read: false,
                timestamp: new Date(),
                conversation: {
                    connect: { id: conversation.id },
                },
            },
        });

        console.log(`üíæ ƒê√£ l∆∞u tin nh·∫Øn t·ª´ ${dto.fromUserId} ƒë·∫øn ${dto.toUserId}:`, savedMessage);

        return {
            ...savedMessage,
            conversationId: conversation.id,
        };
    }


    async getConversationMessages(userA: number, userB: number, page = 1, limit = 20) {
        const [user1, user2] = [userA, userB].sort((a, b) => a - b);

        const conversation = await this.mongo.conversation.findFirst({
            where: { user1, user2 },
        });

        if (!conversation) {
            return {
                messages: [],
                page,
                limit,
                totalMessages: 0,
                totalPages: 0,
            };
        }

        return this.getConversationMessagesById(conversation.id, page, limit);
    }

    async getConversationMessagesById(conversationId: string, page = 1, limit = 20) {
        const skip = (page - 1) * limit;

        const [messages, totalMessages] = await Promise.all([
            this.mongo.message.findMany({
                where: { conversationId },
                orderBy: { timestamp: 'asc' },
                skip,
                take: limit,
            }),
            this.mongo.message.count({ where: { conversationId } }),
        ]);

        return {
            messages,
            page,
            limit,
            totalMessages,
            totalPages: Math.ceil(totalMessages / limit),
        };
    }

    async getUserConversations(token: string) {
        let userId: number;

        // 1. Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
        try {
            const payload = this.jwtService.verify(token);
            userId = payload.sub;
            if (!userId) throw new Error();
        } catch (err) {
            throw new BadRequestException("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        }

        // 2. Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await this.prisma.user.findUnique({
            where: { userId },
        });

        if (!user) {
            throw new NotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
        }

        // 3. L·∫•y c√°c cu·ªôc tr√≤ chuy·ªán t·ª´ MongoDB
        const conversations = await this.mongo.conversation.findMany({
            where: {
                OR: [{ user1: userId }, { user2: userId }],
            },
            orderBy: { updatedAt: "desc" },
            include: {
                messages: {
                    orderBy: { timestamp: "desc" },
                    take: 1,
                },
            },
        });

        if (!conversations.length) return [];

        const conversationIds = conversations.map((c) => c.id);

        // 4. L·∫•y s·ªë tin ch∆∞a ƒë·ªçc cho t·ª´ng cu·ªôc tr√≤ chuy·ªán
        const unreadCounts = await this.mongo.message.groupBy({
            by: ['conversationId'],
            where: {
                conversationId: { in: conversationIds },
                toUser: userId,
                read: false,
            },
            _count: {
                _all: true,
            },
        });

        const unreadMap = new Map(unreadCounts.map((uc) => [uc.conversationId, uc._count._all]));

        // 5. L·∫•y userId c·ªßa ƒë·ªëi ph∆∞∆°ng
        const otherUserIds = Array.from(
            new Set(conversations.map((c) => (c.user1 === userId ? c.user2 : c.user1)))
        );

        // 6. L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªëi ph∆∞∆°ng
        const users = await this.prisma.user.findMany({
            where: { userId: { in: otherUserIds } },
        });

        const userMap = new Map(users.map((u) => [u.userId, u]));

        // 7. Tr·∫£ v·ªÅ danh s√°ch cu·ªôc tr√≤ chuy·ªán
        return conversations.map((c) => {
            const otherUserId = c.user1 === userId ? c.user2 : c.user1;
            const otherUser = userMap.get(otherUserId);

            return {
                id: c.id,
                lastMessage: c.messages[0]?.content ?? "",
                lastTime: c.messages[0]?.timestamp ?? c.updatedAt,
                otherUser,
                unreadCount: unreadMap.get(c.id) ?? 0, // ‚úÖ th√™m unreadCount
            };
        });
    }


    async createConversation(userIdA: number, userIdB: number) {
        if (userIdA === userIdB) {
            throw new BadRequestException('Kh√¥ng th·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán v·ªõi ch√≠nh m√¨nh');
        }

        const [user1, user2] = [userIdA, userIdB].sort((a, b) => a - b);

        // Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
        const users = await this.prisma.user.findMany({
            where: { userId: { in: [user1, user2] } },
        });

        if (users.length !== 2) {
            throw new NotFoundException('M·ªôt ho·∫∑c c·∫£ hai ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
        }

        // Ki·ªÉm tra cu·ªôc tr√≤ chuy·ªán ƒë√£ t·ªìn t·∫°i
        const existing = await this.mongo.conversation.findFirst({
            where: { user1, user2 },
        });

        if (existing) {
            return {
                message: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ t·ªìn t·∫°i',
                conversationId: existing.id,
            };
        }

        // T·∫°o m·ªõi cu·ªôc tr√≤ chuy·ªán
        const conversation = await this.mongo.conversation.create({
            data: { user1, user2 },
        });

        return {
            message: 'T·∫°o cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng',
            conversationId: conversation.id,
        };
    }

    async markMessagesAsRead(conversationId: string, userId: number) {
        const result = await this.mongo.message.updateMany({
            where: {
                conversationId,
                toUser: userId,     // ‚úÖ Ch·ªâ tin g·ª≠i t·ªõi user ƒëang ƒë·ªçc
                read: false,
            },
            data: {
                read: true,
                readAt: new Date(),
            },
        });

        console.log(`‚úÖ ƒê√°nh d·∫•u ${result.count} tin nh·∫Øn l√† ƒë√£ ƒë·ªçc cho user ${userId} trong cu·ªôc tr√≤ chuy·ªán ${conversationId}`);
    }
}
