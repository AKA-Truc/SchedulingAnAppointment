generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // hoặc "mysql" tùy theo hệ quản trị bạn dùng
  url      = env("DATABASE_URL")
}

model User {
  User_ID        Int             @id @default(autoincrement())
  Full_Name      String
  Email          String          @unique
  Phone          String
  Password       String
  Role           RoleEnum
  Gender         GenderEnum
  Created_at     DateTime        @default(now())
  Avatar         String?
  doctor         Doctor?
  patientProfile PatientProfile?
  appointments   Appointment[]
  tokens         Token[]
}

model Token {
  Token_ID         Int      @id @default(autoincrement())
  AccessToken      String // hash access token (hoặc có thể không hash)
  RefreshToken     String // hash refresh token
  User             User     @relation(fields: [User_ID], references: [User_ID])
  User_ID          Int
  CreatedAt        DateTime @default(now())
  AccessExpiresAt  DateTime
  RefreshExpiresAt DateTime
}

model Doctor {
  Doctor_ID         Int              @id @default(autoincrement())
  User              User             @relation(fields: [User_ID], references: [User_ID])
  User_ID           Int              @unique
  Specialty         Specialty        @relation(fields: [Specialty_ID], references: [Specialty_ID])
  Specialty_ID      Int
  Hospital          Hospital         @relation(fields: [Hospital_ID], references: [Hospital_ID])
  Hospital_ID       Int
  Phone             String
  Rating            Float
  Bio               String
  yearsOfExperience String
  certifications    String
  website           String?
  education         String
  achievements      Achievement[] // 1 doctor có nhiều achievements
  schedules         DoctorSchedule[]
  leaves            DoctorLeave[]
  appointments      Appointment[]
}

model PatientProfile {
  Profile_ID        Int      @id @default(autoincrement())
  User_ID           Int      @unique
  User              User     @relation(fields: [User_ID], references: [User_ID])
  Gender            String
  DateOfBirth       DateTime
  Address           String
  Insurance         String
  Allergies         String
  ChronicDiseases   String
  obstetricHistory  String
  surgicalHistory   String
  familyHistory     String
  socialHistory     String
  medicationHistory String
}

model Specialty {
  Specialty_ID Int    @id @default(autoincrement())
  Name         String
  Description  String

  doctors Doctor[]
}

model Hospital {
  Hospital_ID    Int           @id @default(autoincrement())
  Name           String
  Address        String
  Phone          String
  Description    String
  Email          String
  establishYear  Int
  logo           String
  WorkScheduling String
  Type           String // public/private
  achievements   Achievement[] // 1 hospital có nhiều achievements
  doctors        Doctor[]
  appointments   Appointment[]
  website        String?
}

model Appointment {
  Appointment_ID Int      @id @default(autoincrement())
  Doctor         Doctor   @relation(fields: [Doctor_ID], references: [Doctor_ID])
  Doctor_ID      Int
  User           User     @relation(fields: [User_ID], references: [User_ID])
  User_ID        Int
  Hospital       Hospital @relation(fields: [Hospital_ID], references: [Hospital_ID])
  Hospital_ID    Int
  Scheduled_time DateTime
  Note           String?

  reminder      AppointmentReminder?
  feedback      Feedback?
  medicalRecord MedicalRecord?
  followUps     FollowUp[]
  payments      Payment[]
}

model AppointmentReminder {
  reminder_ID    Int         @id @default(autoincrement())
  appointment    Appointment @relation(fields: [appointment_ID], references: [Appointment_ID])
  appointment_ID Int         @unique
  startDate      DateTime
  remindAt       DateTime
  sent           Boolean
}

model Feedback {
  feedback_ID    Int         @id @default(autoincrement())
  appointment    Appointment @relation(fields: [appointment_ID], references: [Appointment_ID])
  appointment_ID Int         @unique
  rating         Int
  comment        String
  createdAt      DateTime    @default(now())
}

model MedicalRecord {
  MedicalRecord_ID      Int         @id @default(autoincrement())
  appointment           Appointment @relation(fields: [Appointment_ID], references: [Appointment_ID])
  Appointment_ID        Int         @unique
  Diagnosis             String
  Prescription          String
  Test_Result           String
  Doctor_notes          String
  ChiefComplaint        String
  historyPresentIllness String
  physicalExam          String
  treatmentGoals        String
  assessment            String
  treatmentPlan         String
  nonDrugPlan           String
  education             String

  prescriptions PrescriptionItem[]
}

model PrescriptionItem {
  Item_ID          Int           @id @default(autoincrement())
  medicalRecord    MedicalRecord @relation(fields: [MedicalRecord_ID], references: [MedicalRecord_ID])
  MedicalRecord_ID Int
  medicineName     String
  dosage           String
  frequency        String
  duration         String
  notes            String
}

model DoctorSchedule {
  schedule_ID Int    @id @default(autoincrement())
  doctor      Doctor @relation(fields: [doctor_ID], references: [Doctor_ID])
  doctor_ID   Int
  dayOfWeek   Int
  startTime   String
  endTime     String
}

model DoctorLeave {
  leave_ID  Int      @id @default(autoincrement())
  doctor    Doctor   @relation(fields: [doctor_ID], references: [Doctor_ID])
  doctor_ID Int
  startDate DateTime
  endDate   DateTime
  reason    String
}

model Payment {
  Payment_ID     Int               @id @default(autoincrement())
  Appointment    Appointment       @relation(fields: [Appointment_ID], references: [Appointment_ID])
  Appointment_ID Int
  Price          Float
  Payment_Method PaymentMethodEnum
  Payment_Status PaymentStatusEnum
}

model FollowUp {
  followUp_ID    Int         @id @default(autoincrement())
  appointment    Appointment @relation(fields: [appointment_ID], references: [Appointment_ID])
  appointment_ID Int
  nextDate       DateTime
  reason         String
  createdAt      DateTime    @default(now())
}

model Achievement {
  Achievement_ID Int       @id @default(autoincrement())
  Title          String
  Description    String?
  DateAchieved   DateTime?

  Doctor    Doctor? @relation(fields: [Doctor_ID], references: [Doctor_ID])
  Doctor_ID Int?

  Hospital    Hospital? @relation(fields: [Hospital_ID], references: [Hospital_ID])
  Hospital_ID Int?
}

enum RoleEnum {
  ADMIN
  DOCTOR
  USER
}

enum PaymentMethodEnum {
  CASH
  CARD
  BANK_TRANSFER
  MOMO
}

enum PaymentStatusEnum {
  PAID
  UNPAID
  PENDING
}

enum GenderEnum {
  Male
  Female
}