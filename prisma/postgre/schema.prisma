generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             Int                @id @default(autoincrement())
  fullName           String
  email              String             @unique
  phone              String
  address            String?
  dateOfBirth        DateTime?
  nationalId         String?
  ethnicity          String?
  password           String
  role               RoleEnum
  gender             GenderEnum
  createdAt          DateTime           @default(now())
  avatar             String?
  isActive           Boolean
  appointments       Appointment[]
  doctor             Doctor?
  medicalRecord      MedicalRecord?
  notifications      Notification[]
  patientProfile     PatientProfile?
  tokens             Token[]
  patientTelemetries PatientTelemetry[] @relation("UserTelemetry")
  patientAlerts      PatientAlert[]     @relation("UserAlert")
  patientConsents    PatientConsent[]   @relation("UserConsent")
}

model Token {
  tokenId          Int      @id @default(autoincrement())
  accessToken      String
  refreshToken     String
  userId           Int
  createdAt        DateTime @default(now())
  accessExpiresAt  DateTime
  refreshExpiresAt DateTime
  user             User     @relation(fields: [userId], references: [userId])
}

model Doctor {
  doctorId          Int              @id @default(autoincrement())
  userId            Int              @unique
  specialtyId       Int
  hospitalId        Int
  rating            Float?
  bio               String?
  yearsOfExperience String?
  education         String?
  clinic            String?
  slotCapacity      Int              @default(5)
  achievements      Achievement[]
  appointments      Appointment[]
  certifications    Certification[]
  hospital          Hospital         @relation(fields: [hospitalId], references: [hospitalId])
  specialty         Specialty        @relation(fields: [specialtyId], references: [specialtyId])
  user              User             @relation(fields: [userId], references: [userId])
  schedules         DoctorSchedule[]
}

model PatientProfile {
  profileId         Int     @id @default(autoincrement())
  userId            Int     @unique
  insurance         String?
  allergies         String?
  chronicDiseases   String?
  obstetricHistory  String?
  surgicalHistory   String?
  familyHistory     String?
  socialHistory     String?
  medicationHistory String?
  user              User    @relation(fields: [userId], references: [userId])
}

model Specialty {
  specialtyId Int      @id @default(autoincrement())
  name        String
  description String
  doctors     Doctor[]
}

model Hospital {
  hospitalId     Int           @id @default(autoincrement())
  name           String
  address        String
  phone          String
  description    String
  email          String
  establishYear  Int
  logo           String
  workScheduling String
  type           String
  website        String?
  certificates   String?
  gallery        String?
  latitude       Float?
  longitude      Float?
  rating         Float?
  reviews        Int?
  totalBeds      Int?
  totalNurses    Int?
  verified       Boolean?      @default(true)
  achievements   Achievement[]
  doctors        Doctor[]
}

model Appointment {
  appointmentId Int              @id @default(autoincrement())
  doctorId      Int
  userId        Int
  serviceId     Int
  scheduledTime DateTime
  createdAt     DateTime          @default(now())
  note          String?
  status        AppointmentStatus
  doctor        Doctor            @relation(fields: [doctorId], references: [doctorId])
  service       Service           @relation(fields: [serviceId], references: [serviceId])
  user          User              @relation(fields: [userId], references: [userId])
  feedback      Feedback?
  followUps     FollowUp[]
  notifications Notification[]
  payments      Payment[]
}

model Service {
  serviceId   Int           @id @default(autoincrement())
  name        String
  price       Int
  duration    String?
  highlighted Boolean?      @default(false)
  description String[]
  calender    String
  appointment Appointment[]
}

model Feedback {
  feedbackId    Int         @id @default(autoincrement())
  appointmentId Int         @unique
  rating        Int
  comment       String
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
}

model MedicalRecord {
  medicalRecordId       Int                @id @default(autoincrement())
  userId                Int                @unique
  historyPresentIllness String
  chiefComplaint        String
  diagnosis             String
  testResult            String
  doctorNotes           String
  treatmentPlan         String
  treatmentGoals        String
  user                  User               @relation(fields: [userId], references: [userId])
  prescriptions         PrescriptionItem[]
}

model PrescriptionItem {
  itemId          Int           @id @default(autoincrement())
  medicalRecordId Int
  medicineName    String
  dosage          String
  frequency       String
  duration        String
  notes           String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [medicalRecordId])
}

model DoctorSchedule {
  scheduleId Int    @id @default(autoincrement())
  doctorId   Int
  dayOfWeek  Int
  startTime  String
  endTime    String
  doctor     Doctor @relation(fields: [doctorId], references: [doctorId])
}

model Payment {
  paymentId     Int               @id @default(autoincrement())
  appointmentId Int
  price         Float
  paymentMethod PaymentMethodEnum
  paymentStatus PaymentStatusEnum
  createdAt     DateTime          @default(now())
  appointment   Appointment       @relation(fields: [appointmentId], references: [appointmentId])
}

model FollowUp {
  followUpId    Int         @id @default(autoincrement())
  appointmentId Int
  nextDate      DateTime
  reason        String
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
}

model Achievement {
  achievementId Int       @id @default(autoincrement())
  title         String
  description   String?
  dateAchieved  DateTime?
  doctorId      Int?
  hospitalId    Int?
  doctor        Doctor?   @relation(fields: [doctorId], references: [doctorId])
  hospital      Hospital? @relation(fields: [hospitalId], references: [hospitalId])
}

model Certification {
  certificationId Int    @id @default(autoincrement())
  fileUrl         String
  doctorId        Int
  doctor          Doctor @relation(fields: [doctorId], references: [doctorId])
}

model Notification {
  notificationId Int              @id @default(autoincrement())
  userId         Int
  appointmentId  Int?
  type           NotificationType
  title          String
  content        String
  remindAt       DateTime
  sent           Boolean          @default(false)
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  scheduledTime  DateTime
  appointment    Appointment?      @relation(fields: [appointmentId], references: [appointmentId])
  user           User             @relation(fields: [userId], references: [userId])
}

model PatientTelemetry {
  id           Int      @id @default(autoincrement())
  patientId    Int
  deviceId     String
  metricType   String
  value        String
  timestamp    DateTime
  deviceType   String?
  batteryLevel Float?

  patient User @relation("UserTelemetry", fields: [patientId], references: [userId])
}

model PatientAlert {
  id        Int      @id @default(autoincrement())
  patientId Int
  alertType String
  value     String
  timestamp DateTime
  status    String

  patient User @relation("UserAlert", fields: [patientId], references: [userId])
}

model PatientConsent {
  id              Int       @id @default(autoincrement())
  patientId       Int
  consentType     ConsentTypeEnum
  status          ConsentStatusEnum
  startDate       DateTime
  endDate         DateTime?
  scope           String[]
  terms           String
  witness         String?
  witnessContact  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  patient         User      @relation("UserConsent", fields: [patientId], references: [userId])
}

enum NotificationType {
  APPOINTMENT
  FOLLOW_UP
  VACCINE
  CUSTOM
}

enum RoleEnum {
  ADMIN
  DOCTOR
  USER
}

enum PaymentMethodEnum {
  CASH
  CARD
  BANK_TRANSFER
  MOMO
}

enum PaymentStatusEnum {
  PAID
  UNPAID
  PENDING
}

enum GenderEnum {
  Male
  Female
  Other
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  RESCHEDULED
  PENDING
}

enum ConsentTypeEnum {
  TREATMENT
  DATA_SHARING
  RESEARCH
  EMERGENCY_CARE
  TELEHEALTH
  MEDICATION
  PROCEDURE
}

enum ConsentStatusEnum {
  GRANTED
  DENIED
  WITHDRAWN
  EXPIRED
}
