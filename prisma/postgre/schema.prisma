generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         Int             @id @default(autoincrement())
  fullName       String
  email          String          @unique
  phone          String
  password       String
  role           RoleEnum
  gender         GenderEnum
  createdAt      DateTime        @default(now())
  avatar         String?
  appointments   Appointment[]
  doctor         Doctor?
  medicalRecord  MedicalRecord?
  notifications  Notification[]
  patientProfile PatientProfile?
  tokens         Token[]

  // FHIR and Advanced Features Relations
  grantedConsents PatientConsent[] @relation("grantedTo")
  accessLogs      AccessLog[]      @relation("accessedBy")
}

model Token {
  tokenId          Int      @id @default(autoincrement())
  accessToken      String
  refreshToken     String
  userId           Int
  createdAt        DateTime @default(now())
  accessExpiresAt  DateTime
  refreshExpiresAt DateTime
  user             User     @relation(fields: [userId], references: [userId])
}

model Doctor {
  doctorId          Int              @id @default(autoincrement())
  userId            Int              @unique
  specialtyId       Int
  hospitalId        Int
  rating            Float?
  bio               String?
  yearsOfExperience String?
  education         String?
  clinic            String?
  achievements      Achievement[]
  appointments      Appointment[]
  certifications    Certification[]
  hospital          Hospital         @relation(fields: [hospitalId], references: [hospitalId])
  specialty         Specialty        @relation(fields: [specialtyId], references: [specialtyId])
  user              User             @relation(fields: [userId], references: [userId])
  schedules         DoctorSchedule[]
}

model PatientProfile {
  profileId         Int      @id @default(autoincrement())
  userId            Int      @unique
  gender            String
  dateOfBirth       DateTime
  address           String
  insurance         String
  allergies         String
  chronicDiseases   String
  obstetricHistory  String
  surgicalHistory   String
  familyHistory     String
  socialHistory     String
  medicationHistory String
  user              User     @relation(fields: [userId], references: [userId])

  // FHIR and Advanced Features Relations
  consents     PatientConsent[]
  accessLogs   AccessLog[]
  telemetry    PatientTelemetry[]
  alerts       PatientAlert[]
}

model Specialty {
  specialtyId Int      @id @default(autoincrement())
  name        String
  description String
  doctors     Doctor[]
}

model Hospital {
  hospitalId     Int           @id @default(autoincrement())
  name           String
  address        String
  phone          String
  description    String
  email          String
  establishYear  Int
  logo           String
  workScheduling String
  type           String
  website        String?
  achievements   Achievement[]
  doctors        Doctor[]
}

model Appointment {
  appointmentId Int               @id @default(autoincrement())
  doctorId      Int
  userId        Int
  serviceId     Int
  scheduledTime DateTime
  note          String?
  status        AppointmentStatus
  doctor        Doctor            @relation(fields: [doctorId], references: [doctorId])
  service       Service           @relation(fields: [serviceId], references: [serviceId])
  user          User              @relation(fields: [userId], references: [userId])
  feedback      Feedback?
  followUps     FollowUp[]
  notifications Notification[]
  payments      Payment[]
}

model Service {
  serviceId   Int           @id @default(autoincrement())
  name        String
  price       Int
  calender    String
  appointment Appointment[]
}

model Feedback {
  feedbackId    Int         @id @default(autoincrement())
  appointmentId Int         @unique
  rating        Int
  comment       String
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
}

model MedicalRecord {
  medicalRecordId       Int                @id @default(autoincrement())
  userId                Int                @unique
  historyPresentIllness String
  chiefComplaint        String
  diagnosis             String
  testResult            String
  doctorNotes           String
  treatmentPlan         String
  treatmentGoals        String
  user                  User               @relation(fields: [userId], references: [userId])
  prescriptions         PrescriptionItem[]
}

model PrescriptionItem {
  itemId          Int           @id @default(autoincrement())
  medicalRecordId Int
  medicineName    String
  dosage          String
  frequency       String
  duration        String
  notes           String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [medicalRecordId])
}

model DoctorSchedule {
  scheduleId Int    @id @default(autoincrement())
  doctorId   Int
  dayOfWeek  Int
  startTime  String
  endTime    String
  doctor     Doctor @relation(fields: [doctorId], references: [doctorId])
}

model Payment {
  paymentId     Int               @id @default(autoincrement())
  appointmentId Int
  price         Float
  paymentMethod PaymentMethodEnum
  paymentStatus PaymentStatusEnum
  createdAt     DateTime          @default(now())
  appointment   Appointment       @relation(fields: [appointmentId], references: [appointmentId])
}

model FollowUp {
  followUpId    Int         @id @default(autoincrement())
  appointmentId Int
  nextDate      DateTime
  reason        String
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
}

model Achievement {
  achievementId Int       @id @default(autoincrement())
  title         String
  description   String?
  dateAchieved  DateTime?
  doctorId      Int?
  hospitalId    Int?
  doctor        Doctor?   @relation(fields: [doctorId], references: [doctorId])
  hospital      Hospital? @relation(fields: [hospitalId], references: [hospitalId])
}

model Certification {
  certificationId Int    @id @default(autoincrement())
  fileUrl         String
  doctorId        Int
  doctor          Doctor @relation(fields: [doctorId], references: [doctorId])
}

model Notification {
  notificationId Int              @id @default(autoincrement())
  userId         Int
  appointmentId  Int
  type           NotificationType
  title          String
  content        String
  remindAt       DateTime
  sent           Boolean          @default(false)
  createdAt      DateTime         @default(now())
  scheduledTime  DateTime
  appointment    Appointment      @relation(fields: [appointmentId], references: [appointmentId])
  user           User             @relation(fields: [userId], references: [userId])
}

// Consent Management
model PatientConsent {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     PatientProfile @relation(fields: [patientId], references: [profileId])
  grantedToId Int
  grantedTo   User     @relation("grantedTo", fields: [grantedToId], references: [userId])
  dataType    String   // e.g., "MEDICAL_HISTORY", "TELEMETRY", "PRESCRIPTIONS"
  purpose     String
  validUntil  DateTime
  status      String   // "ACTIVE", "REVOKED"
  revokedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Access Logging
model AccessLog {
  id           Int      @id @default(autoincrement())
  patientId    Int
  patient      PatientProfile @relation(fields: [patientId], references: [profileId])
  accessedById Int
  accessedBy   User     @relation("accessedBy", fields: [accessedById], references: [userId])
  dataType     String
  purpose      String
  timestamp    DateTime @default(now())
}

// Real-time Telemetry
model PatientTelemetry {
  id         Int      @id @default(autoincrement())
  patientId  Int
  patient    PatientProfile @relation(fields: [patientId], references: [profileId])
  deviceId   String
  metricType String   // "HEART_RATE", "BLOOD_PRESSURE", "SPO2", etc.
  value      String   // JSON string of actual values
  timestamp  DateTime
  createdAt  DateTime @default(now())
}

// Alerts from Telemetry Analysis
model PatientAlert {
  id         Int      @id @default(autoincrement())
  patientId  Int
  patient    PatientProfile @relation(fields: [patientId], references: [profileId])
  alertType  String
  value      String   // JSON string of alert details
  timestamp  DateTime
  status     String   // "PENDING", "ACKNOWLEDGED", "RESOLVED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum NotificationType {
  APPOINTMENT
  FOLLOW_UP
  VACCINE
  CUSTOM
}

enum RoleEnum {
  ADMIN
  DOCTOR
  USER
}

enum PaymentMethodEnum {
  CASH
  CARD
  BANK_TRANSFER
  MOMO
}

enum PaymentStatusEnum {
  PAID
  UNPAID
  PENDING
}

enum GenderEnum {
  Male
  Female
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  RESCHEDULED
}
